ca65 V2.19 - Git 4de40a20c
Main file   : primes3.s
Current file: primes3.s

000000r 1               ; primes3.s
000000r 1               ; compiles with: cl65 -t cx16 -o PRIMES.PRG -l primes.list primes3.s
000000r 1               ; executes with: x16emu -debug / without -rtc option clock does not work
000000r 1               ; clock function does not work well
000000r 1               
000000r 1               .org $080D
00080D  1               .segment "STARTUP"
00080D  1               .segment "INIT"
00080D  1               .segment "ONCE"
00080D  1               .segment "CODE"
00080D  1               
00080D  1  4C 6B 08         jmp start
000810  1               
000810  1               ; Zero Page
000810  1               USR_PTR         = $30
000810  1               STR_PTR         = $60
000810  1               
000810  1               ; Kernal
000810  1               CHRIN           = $FFCF
000810  1               CHROUT          = $FFD2
000810  1               RDTIM           = $FF50
000810  1               
000810  1               ; PETSCII
000810  1               RETURN          = $0D
000810  1               CHAR_0          = $30
000810  1               CHAR_9          = $39
000810  1               NEWLINE         = $0D
000810  1               SPACE           = $20
000810  1               
000810  1               r0	= $02
000810  1               r0L	= $02
000810  1               r0H	= $03
000810  1               r1	= $04
000810  1               r1L	= $04
000810  1               r1H	= $05
000810  1               r2	= $06
000810  1               r2L	= $06
000810  1               r2H	= $07
000810  1               r3	= $08
000810  1               r3L	= $08
000810  1               r3H	= $09
000810  1               r4	= $0a
000810  1               r4L	= $0a
000810  1               r4H	= $0b
000810  1               r5	= $0c
000810  1               r5L	= $0c
000810  1               r5H	= $0d
000810  1               r6	= $0e
000810  1               r6L	= $0e
000810  1               r6H	= $0f
000810  1               r7	= $10
000810  1               r7L	= $10
000810  1               r7H	= $11
000810  1               r8	= $12
000810  1               r8L	= $12
000810  1               r8H	= $13
000810  1               r9	= $14
000810  1               r9L	= $14
000810  1               r9H	= $15
000810  1               r10	= $16
000810  1               r10L	= $16
000810  1               r10H	= $17
000810  1               r11	= $18
000810  1               r11L	= $18
000810  1               r11H	= $19
000810  1               r12	= $1a
000810  1               r12L	= $1a
000810  1               r12H	= $1b
000810  1               r13	= $1c
000810  1               r13L	= $1c
000810  1               r13H	= $1d
000810  1               r14	= $1e
000810  1               r14L	= $1e
000810  1               r14H	= $1f
000810  1               r15	= $20
000810  1               r15L	= $20
000810  1               r15H	= $21
000810  1               
000810  1               
000810  1               ; Zero Page "registers" 16 bit
000810  1               U0 = USR_PTR
000810  1               U1 = U0+2
000810  1               U2 = U1+2
000810  1               U3 = U2+2
000810  1               U4 = U3+2
000810  1               U5 = U4+2
000810  1               U6 = U5+2
000810  1               U7 = U6+2
000810  1               U8 = U7+2
000810  1               U9 = U8+2
000810  1               U10 = U9+2
000810  1               U11 = U10+2
000810  1               U12 = U11+2
000810  1               U13 = U12+2
000810  1               U14 = U13+2
000810  1               U15 = U14+2
000810  1               
000810  1               ; Zero Page "registers" 8 bit
000810  1               b1 = U15+2
000810  1               b2 = b1+1
000810  1               b3 = b2+1
000810  1               b4 = b3+1
000810  1               b5 = b4+1
000810  1               b6 = b5+1
000810  1               
000810  1               ; meaningful variable names
000810  1               number = U0         ; division variables
000810  1               divisor = U1
000810  1               remain = U2
000810  1               result = U3
000810  1               
000810  1               num = U4            ; root variables
000810  1               rem = U5
000810  1               temp = U6
000810  1               root = b1
000810  1               
000810  1               count = U7          ; main variables
000810  1               limit = U8
000810  1               ivar = U9
000810  1               printnum = U10      ; input to PRDecimal subroutine
000810  1               scratch = U11       ; Used by PrDecimal subroutine
000810  1               ; t1_time = U12       ; time vars
000810  1               ; t2_time = U13
000810  1               ; elapsed = U14
000810  1               
000810  1               ;Macros 6502 & 65C02S
000810  1               ;    .macro PushAll
000810  1               ;      pha
000810  1               ;      txa
000810  1               ;      pha
000810  1               ;      tya
000810  1               ;      pha
000810  1               ;   .endmacro
000810  1               
000810  1               ;   .macro PullAll
000810  1               ;       pla
000810  1               ;       tay
000810  1               ;       pla
000810  1               ;       tax
000810  1               ;       pla
000810  1               ;   .endmacro
000810  1               
000810  1                   .macro PushAll
000810  1                       pha
000810  1                       phx
000810  1                       phy
000810  1                   .endmacro
000810  1               
000810  1                   .macro PullAll
000810  1                       ply
000810  1                       plx
000810  1                       pla
000810  1                   .endmacro
000810  1               
000810  1                   ; Loads a 16-bit Word (immediate) to A (lo-byte) and X (hi-byte)
000810  1                   .macro	LoadWordAX value
000810  1               	    lda #<value
000810  1               	    ldx #>value
000810  1                   .endmacro
000810  1               
000810  1                   ; Store the 16-bit Word in AX to address (lo,hi)
000810  1                   .macro	StoreAX address
000810  1               	    sta address
000810  1               	    stx address+1
000810  1                   .endmacro
000810  1               
000810  1                   ; Store a 16-bit Word (immediate) to address (lo,hi)
000810  1                   .macro	StoreImm value, address
000810  1               	    LoadWordAX value
000810  1               	    StoreAX address
000810  1                   .endmacro
000810  1               
000810  1                   ; Moves 1 byte from source to dest
000810  1                   .macro MoveB source, dest
000810  1               	    lda source
000810  1               	    sta dest
000810  1                   .endmacro
000810  1               
000810  1                   ; Moves the 16-bit Word from source (lo,hi) to dest (lo,hi)
000810  1                   .macro MoveW source, dest
000810  1               	    MoveB source+0, dest+0
000810  1               	    MoveB source+1, dest+1
000810  1                   .endmacro
000810  1               
000810  1                   .macro PRINT_STRING string
000810  1                       pha
000810  1                       lda #<string
000810  1                       sta STR_PTR
000810  1                       lda #>string
000810  1                       sta STR_PTR+1
000810  1                       jsr print_str
000810  1                       pla
000810  1                   .endmacro
000810  1               
000810  1                   ; .macro GET_TIME address
000810  1                   ;     jsr RDTIM
000810  1                   ;     ;lda r2L
000810  1                   ;     lda $5              ; minutes
000810  1                   ;     sta address
000810  1                   ;     jsr print_hex
000810  1                   ;     ;lda r2H
000810  1                   ;     lda $6              ; seconds
000810  1                   ;     sta address+1
000810  1                   ;     jsr print_hex
000810  1                   ; .endmacro
000810  1               
000810  1               ; globals
000810  1               ;input_string: .res 5
000810  1  xx xx xx xx  input_string: .res 8        ; need a longer string to get 16bit numbers
000814  1  xx xx xx xx  
000818  1  00 00        temp_word: .word 0
00081A  1  00 00        input_binary: .word 0
00081C  1               
00081C  1               ; prompts
00081C  1  53 45 41 52  prompt:           .asciiz "search primes limit: "
000820  1  43 48 20 50  
000824  1  52 49 4D 45  
000832  1  4D 55 53 54  num_error_prompt: .asciiz "must be a number: "
000836  1  20 42 45 20  
00083A  1  41 20 4E 55  
000845  1  4E 55 4D 42  count_of_primes:  .asciiz "number of primes: "
000849  1  45 52 20 4F  
00084D  1  46 20 50 52  
000858  1  54 4F 4F 4B  time_it_took:     .asciiz "took (mins secs): "
00085C  1  20 28 4D 49  
000860  1  4E 53 20 53  
00086B  1               
00086B  1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00086B  1               ;Main
00086B  1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00086B  1               start:
00086B  1  48 A9 1C 85      PRINT_STRING prompt
00086F  1  60 A9 08 85  
000873  1  61 20 53 09  
000878  1  20 6A 09         jsr get_number
00087B  1  AD 1A 08 85      MoveW input_binary, limit
00087F  1  40 AD 1B 08  
000883  1  85 41        
000885  1  A9 01 A2 00      StoreImm 1, ivar        ; init outerloop variable
000889  1  85 42 86 43  
00088D  1               
00088D  1  A9 01 A2 00      StoreImm 1, count       ; 2 is a prime
000891  1  85 3E 86 3F  
000895  1                   ; StoreImm 2, printnum    ; print it
000895  1                   ; ldy #0                  ; Pad char '0' #48 or ' ' #32 or #0 for none
000895  1                   ; jsr PrDec16
000895  1                   ; lda #','
000895  1                   ; jsr CHROUT
000895  1                   ; lda #SPACE
000895  1                   ; jsr CHROUT
000895  1               
000895  1                   ; GET_TIME t1_time        ; start measuring time
000895  1               
000895  1               outerloop:
000895  1  E6 42            inc ivar                ; increment ivar by 2
000897  1  D0 02            bne @cont1
000899  1  E6 43            inc ivar+1
00089B  1               @cont1:
00089B  1  E6 42            inc ivar
00089D  1  D0 02            bne @cont2
00089F  1  E6 43            inc ivar+1
0008A1  1               @cont2:
0008A1  1                   ; loop check
0008A1  1  A5 43            lda ivar+1              ; compare high byte
0008A3  1  C5 41            cmp limit+1
0008A5  1  90 0C            bcc continue
0008A7  1  D0 1A            bne outerloopdone
0008A9  1  A5 42            lda ivar                ; compare low byte
0008AB  1  C5 40            cmp limit
0008AD  1  90 04            bcc continue            ; islower - ivar is lower than limit
0008AF  1  F0 02            beq continue            ; issame - ivar = limit
0008B1  1  D0 10            bne outerloopdone       ; ishigher - ivar is higher
0008B3  1               continue:
0008B3  1  20 08 0A         jsr checkPrime          ; check if ivar is prime
0008B6  1  A5 34            lda remain
0008B8  1  F0 DB            beq outerloop
0008BA  1               @processPrime:
0008BA  1  E6 3E            inc count
0008BC  1  D0 02            bne @done_inc
0008BE  1  E6 3F            inc count+1
0008C0  1               @done_inc:
0008C0  1                   ; jsr print_prime       ; don't print the number just count them
0008C0  1  4C 95 08         jmp outerloop
0008C3  1               outerloopdone:
0008C3  1                   ; GET_TIME t2_time        ; stop measuting time
0008C3  1  A9 0D            lda #NEWLINE
0008C5  1  20 D2 FF         jsr CHROUT
0008C8  1  A5 3E 85 44      MoveW count, printnum
0008CC  1  A5 3F 85 45  
0008D0  1  48 A9 45 85      PRINT_STRING count_of_primes
0008D4  1  60 A9 08 85  
0008D8  1  61 20 53 09  
0008DD  1  A0 00            ldy #0                  ; no padding
0008DF  1  20 00 09         jsr PrDec16
0008E2  1  A9 0D            lda #NEWLINE
0008E4  1  20 D2 FF         jsr CHROUT
0008E7  1                   ; jsr print_elapsed       ; calc and print elapsed timecl
0008E7  1  60               rts
0008E8  1               
0008E8  1               ; print_elapsed:
0008E8  1               ;     PRINT_STRING time_it_took
0008E8  1               ;     lda #0
0008E8  1               ;     sta printnum+1
0008E8  1               ;     sec
0008E8  1               ;     lda t2_time
0008E8  1               ;     sbc t1_time
0008E8  1               ;     sta printnum
0008E8  1               ;     ldy #0
0008E8  1               ;     jsr PrDec16
0008E8  1               ;     lda #SPACE
0008E8  1               ;     jsr CHROUT
0008E8  1               ;     sec
0008E8  1               ;     lda t2_time+1
0008E8  1               ;     sbc t1_time+1
0008E8  1               ;     sta printnum
0008E8  1               ;     ldy #0
0008E8  1               ;     jsr PrDec16
0008E8  1               ;     lda #NEWLINE
0008E8  1               ;     jsr CHROUT
0008E8  1               ;     rts
0008E8  1               
0008E8  1               print_prime:
0008E8  1  A5 42 85 44      MoveW ivar, printnum    ; copy ivar to U10 "printnum" to convert and print
0008EC  1  A5 43 85 45  
0008F0  1  A0 00            ldy #0                  ; Pad char '0' #48 or ' ' #32 or #0 for none
0008F2  1  20 00 09         jsr PrDec16
0008F5  1  A9 2C            lda #','
0008F7  1  20 D2 FF         jsr CHROUT
0008FA  1  A9 20            lda #SPACE
0008FC  1  20 D2 FF         jsr CHROUT
0008FF  1  60               rts
000900  1               
000900  1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000900  1               ;Print 16-bit decimal number
000900  1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000900  1               ; INPUT:    U10 = value to print, copied to scratch scratch
000900  1               ;           .Y  = pad character
000900  1               ;           (e.g. '0' #48 or ' ' #32 or #0 for none)
000900  1               ;
000900  1               ; INPUT:    at PrDec16Lp1
000900  1               ;           Y=(number of digits)*2-2, e.g. 8 for 5 digits
000900  1               ;
000900  1               ; OUTPUT:   A,X,Y corrupted
000900  1               PrDec16:
000900  1  8C 52 09     	sty pad                 ; Save new padding character
000903  1  A5 44 85 46  	MoveW U10, scratch
000907  1  A5 45 85 47  
00090B  1  A0 08        	ldy #8                  ; Offset to powers of ten
00090D  1               PrDec16Lp1:
00090D  1  A2 FF        	ldx #$FF                ; Start with digit=-1
00090F  1  38           	sec
000910  1               PrDec16Lp2:
000910  1  A5 46        	lda scratch                 ; Subtract current tens
000912  1  F9 48 09     	sbc PrDec16Tens+0,Y
000915  1  85 46            sta scratch
000917  1  A5 47            lda scratch+1
000919  1  F9 49 09         sbc PrDec16Tens+1,Y
00091C  1  85 47            sta scratch+1
00091E  1  E8               inx                     ; Loop until <0
00091F  1  B0 EF            bcs PrDec16Lp2
000921  1  A5 46            lda scratch                 ; Add current tens back in
000923  1  79 48 09         adc PrDec16Tens+0,Y
000926  1  85 46            sta scratch
000928  1  A5 47            lda scratch+1
00092A  1  79 49 09         adc PrDec16Tens+1,Y
00092D  1  85 47            sta scratch+1
00092F  1  8A               txa                     ; Not zero, print it
000930  1  D0 07            bne PrDec16Digit
000932  1  AD 52 09         lda pad                 ; pad<>0, use it
000935  1  D0 09            bne PrDec16Print
000937  1  F0 0A            beq PrDec16Next
000939  1               PrDec16Digit:
000939  1  A2 30            ldx #48                 ; ASC"0", No more zero padding
00093B  1  8E 52 09         stx pad
00093E  1  09 30            ora #48                 ; ASC"0", Print this digit
000940  1               PrDec16Print:
000940  1  20 D2 FF         jsr CHROUT
000943  1               PrDec16Next:
000943  1  88               dey                     ; Loop for next digit
000944  1  88               dey
000945  1  10 C6            bpl PrDec16Lp1
000947  1  60               rts
000948  1               PrDec16Tens:
000948  1  01 00            .word 1
00094A  1  0A 00            .word 10
00094C  1  64 00            .word 100
00094E  1  E8 03            .word 1000
000950  1  10 27            .word 10000
000952  1  xx           pad:.res 1
000953  1               
000953  1               print_str: ; STR_PTR = address of null-terminated string
000953  1  5A               phy
000954  1  A0 00            ldy #0
000956  1               @loop:
000956  1  B1 60            lda (STR_PTR),y
000958  1  F0 06            beq @done
00095A  1  20 D2 FF         jsr CHROUT
00095D  1  C8               iny
00095E  1  80 F6            bra @loop
000960  1               @done:
000960  1  7A               ply
000961  1  60               rts
000962  1               
000962  1               
000962  1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000962  1               ;Flush chrin
000962  1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000962  1               flush_chrin:
000962  1  20 CF FF         jsr CHRIN
000965  1  C9 0D            cmp #RETURN
000967  1  D0 F9            bne flush_chrin
000969  1  60               rts
00096A  1               
00096A  1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00096A  1               ;Get number input from console
00096A  1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00096A  1               get_number:
00096A  1  48               pha
00096B  1  DA               phx
00096C  1  5A               phy
00096D  1  A2 00            ldx #0
00096F  1               @input_loop:
00096F  1  20 CF FF         jsr CHRIN
000972  1  C9 0D            cmp #RETURN
000974  1  F0 0B            beq @input_done
000976  1  9D 10 08         sta input_string,x
000979  1  E8               inx
00097A  1                   ;cpx #5
00097A  1  E0 08            cpx #8
00097C  1  D0 F1            bne @input_loop
00097E  1  20 62 09         jsr flush_chrin
000981  1               @input_done: ; A = RETURN
000981  1  20 D2 FF         jsr CHROUT
000984  1  9E 10 08         stz input_string,x ; null termination
000987  1                   ; check for number
000987  1  A2 00            ldx #0
000989  1               @check_loop:
000989  1  BD 10 08         lda input_string,x
00098C  1  C9 00            cmp #0
00098E  1  F0 0B            beq @check_empty
000990  1  C9 30            cmp #CHAR_0
000992  1  30 0B            bmi @error
000994  1  C9 3A            cmp #(CHAR_9 + 1)
000996  1  10 07            bpl @error
000998  1  E8               inx
000999  1  80 EE            bra @check_loop
00099B  1               @check_empty:
00099B  1  E0 00            cpx #0
00099D  1  D0 10            bne @convert
00099F  1               @error:
00099F  1  48 A9 32 85      PRINT_STRING num_error_prompt
0009A3  1  60 A9 08 85  
0009A7  1  61 20 53 09  
0009AC  1  4C 6F 09         jmp @input_loop
0009AF  1               @convert:
0009AF  1  A2 00            ldx #0
0009B1  1  9C 1A 08         stz input_binary
0009B4  1  9C 1B 08         stz input_binary+1
0009B7  1               @conv_loop:
0009B7  1  BD 10 08         lda input_string,x
0009BA  1  F0 48            beq @done
0009BC  1                   ; new digit, multiply input_binary by 10
0009BC  1  0E 1A 08         asl input_binary
0009BF  1  2E 1B 08         rol input_binary+1
0009C2  1  AD 1A 08         lda input_binary
0009C5  1                   ; multiplied by 2 - save value in temp variable
0009C5  1  8D 18 08         sta temp_word
0009C8  1  AD 1B 08         lda input_binary+1
0009CB  1  8D 19 08         sta temp_word+1
0009CE  1                   ; continue shifting two more bits to multiply by 8
0009CE  1  0E 1A 08         asl input_binary
0009D1  1  2E 1B 08         rol input_binary+1
0009D4  1  0E 1A 08         asl input_binary
0009D7  1  2E 1B 08         rol input_binary+1
0009DA  1                   ; now add x2 value to x8 value to get x10 value
0009DA  1  AD 1A 08         lda input_binary
0009DD  1  18               clc
0009DE  1  6D 18 08         adc temp_word
0009E1  1  8D 1A 08         sta input_binary
0009E4  1  AD 1B 08         lda input_binary+1
0009E7  1  6D 19 08         adc temp_word+1
0009EA  1  8D 1B 08         sta input_binary+1
0009ED  1                   ; now add digit from string
0009ED  1  BD 10 08         lda input_string,x
0009F0  1  29 0F            and #$0F ; zero out upper nybble to get digit numerical value
0009F2  1  18               clc
0009F3  1  6D 1A 08         adc input_binary
0009F6  1  8D 1A 08         sta input_binary
0009F9  1  AD 1B 08         lda input_binary+1
0009FC  1  69 00            adc #0 ; let carry happen, if necessary
0009FE  1  8D 1B 08         sta input_binary+1
000A01  1  E8               inx
000A02  1  80 B3            bra @conv_loop
000A04  1               @done:
000A04  1  7A               ply
000A05  1  FA               plx
000A06  1  68               pla
000A07  1  60               rts
000A08  1               
000A08  1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000A08  1               ;Check is a given number is prime
000A08  1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000A08  1               ; trial division
000A08  1               checkPrime:
000A08  1  A9 01        	lda #1                  ; set divisor to 1
000A0A  1  85 32        	sta divisor
000A0C  1  A5 42 85 38      MoveW ivar, num         ; load num (root) with ivar
000A10  1  A5 43 85 39  
000A14  1  20 A7 0A         jsr sqroot              ; calc sqroot of num
000A17  1  E6 50            inc root                ; add 1 to root for loop limit = int(sqrt(i))+1
000A19  1               @loopcheck:
000A19  1  E6 32        	inc divisor
000A1B  1  A5 42 85 30      MoveW ivar, number      ; reset number to be divided
000A1F  1  A5 43 85 31  
000A23  1                   ;jsr divide              ; trial division
000A23  1  20 8C 0A         jsr divideby8bit        ; divide by 8 bit - much faster
000A26  1  A5 34        	lda remain              ; if remainder is zero it is not a prime
000A28  1  F0 06        	beq @exit	            ; branch if equal to 0
000A2A  1               
000A2A  1  A6 32            ldx divisor             ; are we done yet?
000A2C  1  E4 50            cpx root
000A2E  1  D0 E9            bne @loopcheck
000A30  1               @exit:
000A30  1  60           	rts
000A31  1               
000A31  1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000A31  1               ;Print hex 8 bit numbers
000A31  1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000A31  1               ; printhex:           ; prints an 8 bit value in hex - easier to understand logic
000A31  1               ;     pha             ; saves A for lowest significant digit
000A31  1               ; print_hi:
000A31  1               ;     lsr             ; shift right 4 bits
000A31  1               ;     lsr
000A31  1               ;     lsr
000A31  1               ;     lsr
000A31  1               ;     jsr hex
000A31  1               ; print_lo:
000A31  1               ;     pla             ; fetch for lowest significant digit
000A31  1               ; hex:
000A31  1               ;     and #$0f        ; keep only the lower 4 bits
000A31  1               ;     ora #$30        ; i.e. "0" - convert to ASCII - suma $30 (si $3 -> $33)
000A31  1               ;     cmp #$3a        ; digit? (ascii code above numbers - es $33 < $3A?)
000A31  1               ;     bcc echo        ; yes - if it is a digit just print it
000A31  1               ;     adc #6          ; add offset for A if it a letter A to F
000A31  1               ; echo:
000A31  1               ;     jsr CHROUT      ; print it
000A31  1               ; rts
000A31  1               
000A31  1               ; lookup table to print hex digits
000A31  1  30 31 32 33  hex_digits: .asciiz "0123456789abcdef"
000A35  1  34 35 36 37  
000A39  1  38 39 41 42  
000A42  1               
000A42  1               printhex:           ; prints an 8 bit value in hex - faster with no branching using lookup table
000A42  1  48 DA 5A         PushAll
000A45  1  48               pha
000A46  1  29 0F            and  #$0f
000A48  1  AA               tax
000A49  1  BC 31 0A         ldy  hex_digits,x
000A4C  1  68               pla
000A4D  1  4A               lsr  a
000A4E  1  4A               lsr  a
000A4F  1  4A               lsr  a
000A50  1  4A               lsr  a
000A51  1  AA               tax
000A52  1  BD 31 0A         lda  hex_digits,x
000A55  1  20 D2 FF         jsr CHROUT      ; print high nibble
000A58  1  98               tya
000A59  1  20 D2 FF         jsr CHROUT      ; print low nibble
000A5C  1  7A FA 68         PullAll
000A5F  1  60               rts
000A60  1               
000A60  1               
000A60  1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000A60  1               ;16-Bit by 16-Bit Binary Division
000A60  1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000A60  1               ;number = U0
000A60  1               ;divisor = U1
000A60  1               ;remain = U2
000A60  1               ;result = U3
000A60  1               divide:
000A60  1  48 DA 5A         PushAll
000A63  1  A9 00        	lda #0	        ; preset remainder to 0
000A65  1  85 34        	sta remain
000A67  1  85 35        	sta remain+1
000A69  1  A2 10        	ldx #16	       	; repeat for each bit - 16 times
000A6B  1               @divloop:
000A6B  1  06 30        	asl number		; dividend lb & hb*2, msb -> Carry
000A6D  1  26 31        	rol number+1
000A6F  1  26 34        	rol remain		; remainder lb & hb * 2 + msb from carry
000A71  1  26 35        	rol remain+1
000A73  1  A5 34        	lda remain
000A75  1  38           	sec
000A76  1  E5 32        	sbc divisor		; substract divisor to see if it fits in
000A78  1  A8           	tay	        	; lb result -> Y, for we may need it later
000A79  1  A5 35        	lda remain+1
000A7B  1  E5 33        	sbc divisor+1
000A7D  1  90 06        	bcc @skip		; if carry=0 then divisor didn't fit in yet
000A7F  1  85 35        	sta remain+1	; else save substraction result as new remainder
000A81  1  84 34        	sty remain
000A83  1  E6 36        	inc result		; and increment result cause divisor fit in 1 times
000A85  1               @skip:
000A85  1  CA           	dex
000A86  1  D0 E3        	bne @divloop
000A88  1  7A FA 68         PullAll
000A8B  1  60           	rts
000A8C  1               
000A8C  1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000A8C  1               ;16-Bit by 8-Bit Binary Division
000A8C  1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000A8C  1               divideby8bit:
000A8C  1                   ; PushAll
000A8C  1  A9 00            lda #0
000A8E  1  85 35            sta remain+1
000A90  1  A0 10            ldy #16
000A92  1               @L0:
000A92  1  06 30            asl number
000A94  1  26 31            rol number+1
000A96  1  2A               rol a
000A97  1  B0 04            bcs @L1
000A99  1  C5 32            cmp divisor
000A9B  1  90 04            bcc @L2
000A9D  1               @L1:
000A9D  1  E5 32            sbc divisor
000A9F  1  E6 30            inc number
000AA1  1               @L2:
000AA1  1  88               dey
000AA2  1  D0 EE            bne @L0
000AA4  1  85 34            sta remain
000AA6  1                   ; PullAll
000AA6  1  60               rts
000AA7  1               
000AA7  1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000AA7  1               ;Calculates 8-bit sqrt of 16-bit integer in num/num+1
000AA7  1               ;result in root (0-255) and remainder in remain (0-511) in rem/rem+1
000AA7  1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000AA7  1               ; num = U4
000AA7  1               ; rem = U5
000AA7  1               ; temp = U6
000AA7  1               ; root = b1
000AA7  1               sqroot:
000AA7  1  48 DA 5A     	PushAll
000AAA  1  A9 00        	lda	#0  		; clear A
000AAC  1  85 3A        	sta	rem		    ; clear remainder low byte
000AAE  1  85 3B        	sta	rem+1    	; clear remainder high byte
000AB0  1  85 50        	sta	root		; clear Root
000AB2  1  A2 08        	ldx	#8  		; 8 pairs of bits to do
000AB4  1               @loop:
000AB4  1  06 50        	asl	root		; root = root * 2
000AB6  1               
000AB6  1  06 38        	asl	num		    ; shift highest bit of number ..
000AB8  1  26 39        	rol	num+1
000ABA  1  26 3A        	rol	rem		    ; .. into remainder
000ABC  1  26 3B        	rol	rem+1
000ABE  1               
000ABE  1  06 38        	asl	num		    ; shift highest bit of number ..
000AC0  1  26 39        	rol	num+1
000AC2  1  26 3A        	rol	rem		    ; .. into remainder
000AC4  1  26 3B        	rol	rem+1
000AC6  1               
000AC6  1  A5 50        	lda	root		; copy root ..
000AC8  1  85 3C        	sta	temp		; .. to temp
000ACA  1  A9 00        	lda	#0  		; clear byte
000ACC  1  85 3D        	sta	temp+1		; clear temp high byte
000ACE  1               
000ACE  1  38           	sec				; +1
000ACF  1  26 3C        	rol	temp		; temp = temp * 2 + 1
000AD1  1  26 3D        	rol	temp+1
000AD3  1               
000AD3  1  A5 3B        	lda	rem+1    	; get remainder high byte
000AD5  1  C5 3D        	cmp	temp+1		; compare with partial high byte
000AD7  1  90 16        	bcc	@next		; skip sub if remainder high byte smaller
000AD9  1               
000AD9  1  D0 06        	bne	@subtr		; do sub if <> (must be remainder>partial !)
000ADB  1               
000ADB  1  A5 3A        	lda	rem	    	; get remainder low byte
000ADD  1  C5 3C        	cmp	temp		; comapre with partial low byte
000ADF  1  90 0E        	bcc	@next		; skip sub if remainder low byte smaller
000AE1  1               
000AE1  1                                   ; else remainder>=partial so subtract then
000AE1  1               				    ; and add 1 to root. carry is always set here
000AE1  1               @subtr:
000AE1  1  A5 3A        	lda	rem		    ; get remainder low byte
000AE3  1  E5 3C        	sbc	temp		; subtract partial low byte
000AE5  1  85 3A        	sta	rem    	    ; save remainder low byte
000AE7  1  A5 3B        	lda	rem+1    	; get remainder high byte
000AE9  1  E5 3D        	sbc	temp+1		; subtract partial high byte
000AEB  1  85 3B        	sta	rem+1    	; save remainder high byte
000AED  1  E6 50        	inc	root		; increment Root
000AEF  1               
000AEF  1               @next:
000AEF  1  CA           	dex				; decrement bit pair count
000AF0  1  D0 C2        	bne	@loop		; loop if not all done
000AF2  1  7A FA 68     	PullAll
000AF5  1  60           	rts
000AF6  1               
000AF6  1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000AF6  1               ;Print registers
000AF6  1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000AF6  1  20 41 20 20  header: .asciiz " a  x  y sp sr"
000AFA  1  58 20 20 59  
000AFE  1  20 53 50 20  
000B05  1               
000B05  1               print_header:
000B05  1  A2 00            ldx #0
000B07  1               @header_loop:
000B07  1  BD F6 0A         lda header,x
000B0A  1  F0 06            beq @header_done
000B0C  1  20 D2 FF         jsr CHROUT
000B0F  1  E8               inx
000B10  1  80 F5            bra @header_loop
000B12  1               @header_done:
000B12  1  A9 0D            lda #NEWLINE
000B14  1  20 D2 FF         jsr CHROUT
000B17  1  60               rts
000B18  1               
000B18  1               print_regs:
000B18  1  08               php
000B19  1  48               pha
000B1A  1  DA               phx
000B1B  1  08               php ; push P again for quick retrieval
000B1C  1  20 50 0B         jsr print_hex
000B1F  1  A9 20            lda #SPACE
000B21  1  20 D2 FF         jsr CHROUT
000B24  1  8A               txa
000B25  1  20 50 0B         jsr print_hex
000B28  1  A9 20            lda #SPACE
000B2A  1  20 D2 FF         jsr CHROUT
000B2D  1  98               tya
000B2E  1  20 50 0B         jsr print_hex
000B31  1  A9 20            lda #SPACE
000B33  1  20 D2 FF         jsr CHROUT
000B36  1  BA               tsx
000B37  1  8A               txa
000B38  1  18               clc
000B39  1  69 06            adc #6 ; calculate SP from before JSR
000B3B  1  20 50 0B         jsr print_hex
000B3E  1  A9 20            lda #SPACE
000B40  1  20 D2 FF         jsr CHROUT
000B43  1  68               pla ; pull earlier P into A
000B44  1  20 50 0B         jsr print_hex
000B47  1  A9 0D            lda #NEWLINE
000B49  1  20 D2 FF         jsr CHROUT
000B4C  1  FA               plx
000B4D  1  68               pla
000B4E  1  28               plp
000B4F  1  60               rts
000B50  1               
000B50  1               ; like how these subroutined work without lookup tables and easy to understand
000B50  1               print_hex:
000B50  1  48               pha	   ; push original A to stack
000B51  1  4A               lsr
000B52  1  4A               lsr
000B53  1  4A               lsr
000B54  1  4A               lsr      ; A = A >> 4
000B55  1  20 5F 0B         jsr print_hex_digit
000B58  1  68               pla      ; pull original A back from stack
000B59  1  29 0F            and #$0F ; A = A & 0b00001111
000B5B  1  20 5F 0B         jsr print_hex_digit
000B5E  1  60               rts
000B5F  1               
000B5F  1               print_hex_digit:
000B5F  1  C9 0A            cmp #$0A
000B61  1  10 04            bpl @letter
000B63  1  09 30            ora #$30    ; PETSCII numbers: 1=$31, 2=$32, etc.
000B65  1  80 03            bra @print
000B67  1               @letter:
000B67  1  18               clc
000B68  1  69 37            adc #$37		; PETSCII letters: A=$41, B=$42, etc.
000B6A  1               @print:
000B6A  1  20 D2 FF         jsr CHROUT
000B6D  1  60               rts
000B6D  1               
