;
; File generated by cc65 v 2.19 - Git 4de40a20c
;
	.fopt		compiler,"cc65 v 2.19 - Git 4de40a20c"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_getchar
	.import		_printf
	.import		_scanf
	.import		_clock
	.export		_i
	.export		_n
	.export		_cant
	.export		_num
	.export		_isPrime
	.export		_numPrim
	.export		_sq
	.export		_Ticks
	.export		_Sec
	.export		_Milli
	.import		_sqrt
	.export		_Flush
	.export		_GetCommand
	.export		_main

.segment	"RODATA"

S0003:
	.byte	$D3,$45,$45,$4B,$20,$50,$52,$49,$4D,$45,$53,$20,$55,$4E,$54,$49
	.byte	$4C,$20,$57,$48,$41,$54,$20,$4E,$55,$4D,$42,$45,$52,$20,$3F,$20
	.byte	$28,$D5,$50,$20,$54,$4F,$20,$35,$30,$2C,$30,$30,$30,$29,$00
S0005:
	.byte	$C6,$4F,$55,$4E,$44,$20,$25,$49,$20,$50,$52,$49,$4D,$45,$53,$20
	.byte	$49,$4E,$20,$25,$55,$2E,$25,$30,$33,$55,$20,$53,$45,$43,$4F,$4E
	.byte	$44,$53,$0D,$00
S0008:
	.byte	$0D,$C1,$4E,$4F,$54,$48,$45,$52,$20,$52,$55,$4E,$20,$3F,$20,$28
	.byte	$59,$2F,$4E,$29,$20,$00
S0006:
	.byte	$D0,$52,$49,$4E,$54,$20,$54,$48,$45,$4D,$20,$3F,$20,$28,$59,$2F
	.byte	$4E,$29,$20,$00
S0002:
	.byte	$0D,$2A,$2A,$2A,$2D,$2D,$2D,$2D,$2D,$2A,$2A,$2A,$0D,$00
S0007:
	.byte	$25,$49,$2C,$20,$20,$00
S0004:
	.byte	$25,$49,$00
S0001:
	.byte	$25,$43,$00

.segment	"BSS"

_i:
	.res	2,$00
_n:
	.res	2,$00
_cant:
	.res	2,$00
_num:
	.res	2,$00
_isPrime:
	.res	2,$00
_numPrim:
	.res	10400,$00
_sq:
	.res	2,$00
_Ticks:
	.res	4,$00
_Sec:
	.res	2,$00
_Milli:
	.res	2,$00

; ---------------------------------------------------------------
; void __near__ Flush (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_Flush: near

.segment	"CODE"

L0002:	jsr     _getchar
	cpx     #$00
	bne     L0002
	cmp     #$0D
	bne     L0002
	rts

.endproc

; ---------------------------------------------------------------
; int __near__ GetCommand (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_GetCommand: near

.segment	"CODE"

	jsr     decsp1
	jsr     _Flush
L0002:	lda     #<(S0001)
	ldx     #>(S0001)
	jsr     pushax
	lda     #$02
	jsr     leaa0sp
	jsr     pushax
	ldy     #$04
	jsr     _scanf
	ldy     #$00
	lda     (sp),y
	cmp     #$59
	beq     L0010
	cmp     #$D9
	beq     L0010
	cmp     #$4E
	beq     L0010
	cmp     #$CE
	bne     L0002
L0010:	lda     (sp),y
	cmp     #$59
	beq     L0011
	cmp     #$D9
	beq     L0011
	ldx     #$00
	txa
	jmp     incsp1
L0011:	ldx     #$00
	lda     #$01
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; int __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

L0002:	ldx     #$00
	lda     #$02
	sta     _numPrim
	stx     _numPrim+1
	lda     #$01
	sta     _cant
	stx     _cant+1
	lda     #<(S0002)
	ldx     #>(S0002)
	jsr     pushax
	ldy     #$02
	jsr     _printf
	lda     #<(S0003)
	ldx     #>(S0003)
	jsr     pushax
	ldy     #$02
	jsr     _printf
L0005:	lda     #<(S0004)
	ldx     #>(S0004)
	jsr     pushax
	lda     #<(_num)
	ldx     #>(_num)
	jsr     pushax
	ldy     #$04
	jsr     _scanf
	lda     _num
	ora     _num+1
	bne     L0021
	lda     _num
	ldx     _num+1
	jsr     axulong
	jsr     pusheax
	ldx     #$C3
	lda     #$00
	sta     sreg
	sta     sreg+1
	lda     #$51
	jsr     tosgeeax
	bne     L0005
L0021:	jsr     _clock
	sta     _Ticks
	stx     _Ticks+1
	ldy     sreg
	sty     _Ticks+2
	ldy     sreg+1
	sty     _Ticks+3
	ldx     #$00
	lda     #$03
L0028:	sta     _i
	stx     _i+1
	lda     _i
	sec
	sbc     _num
	sta     tmp1
	lda     _i+1
	sbc     _num+1
	ora     tmp1
	bcc     L000F
	jne     L000D
L000F:	ldx     #$00
	lda     #$01
	sta     _isPrime
	stx     _isPrime+1
	lda     _i
	ldx     _i+1
	jsr     _sqrt
	sta     _sq
	stx     _sq+1
	ldx     #$00
	lda     #$03
L0027:	sta     _n
	stx     _n+1
	lda     _n
	sec
	sbc     _sq
	sta     tmp1
	lda     _n+1
	sbc     _sq+1
	ora     tmp1
	beq     L0023
	bcs     L0011
L0023:	lda     _isPrime
	ora     _isPrime+1
	beq     L0011
	lda     _i
	ldx     _i+1
	jsr     pushax
	lda     _n
	ldx     _n+1
	jsr     tosumodax
	cpx     #$00
	bne     L0012
	cmp     #$00
	bne     L0012
	sta     _isPrime
	sta     _isPrime+1
L0012:	lda     _n
	ldx     _n+1
	jsr     incax2
	jmp     L0027
L0011:	lda     _isPrime
	ora     _isPrime+1
	beq     L000E
	lda     _cant
	ldx     _cant+1
	jsr     aslax1
	clc
	adc     #<(_numPrim)
	sta     ptr1
	txa
	adc     #>(_numPrim)
	sta     ptr1+1
	lda     _i
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     _i+1
	sta     (ptr1),y
	inc     _cant
	bne     L000E
	inc     _cant+1
L000E:	lda     _i
	ldx     _i+1
	jsr     incax2
	jmp     L0028
L000D:	jsr     _clock
	jsr     pusheax
	lda     _Ticks+3
	sta     sreg+1
	lda     _Ticks+2
	sta     sreg
	ldx     _Ticks+1
	lda     _Ticks
	jsr     tossubeax
	sta     _Ticks
	stx     _Ticks+1
	ldy     sreg
	sty     _Ticks+2
	ldy     sreg+1
	sty     _Ticks+3
	lda     _Ticks+3
	sta     sreg+1
	lda     _Ticks+2
	sta     sreg
	ldx     _Ticks+1
	lda     _Ticks
	jsr     pusheax
	ldx     #$00
	lda     #$3C
	jsr     tosudiv0ax
	sta     _Sec
	stx     _Sec+1
	lda     _Ticks+3
	sta     sreg+1
	lda     _Ticks+2
	sta     sreg
	ldx     _Ticks+1
	lda     _Ticks
	jsr     pusheax
	ldx     #$00
	lda     #$3C
	jsr     tosumod0ax
	jsr     pusheax
	ldx     #$03
	lda     #$E8
	jsr     tosumul0ax
	jsr     pusheax
	ldx     #$00
	lda     #$3C
	jsr     tosudiv0ax
	sta     _Milli
	stx     _Milli+1
	lda     #<(S0005)
	ldx     #>(S0005)
	jsr     pushax
	lda     _cant
	ldx     _cant+1
	jsr     pushax
	lda     _Sec
	ldx     _Sec+1
	jsr     pushax
	lda     _Milli
	ldx     _Milli+1
	jsr     pushax
	ldy     #$08
	jsr     _printf
	lda     #<(S0006)
	ldx     #>(S0006)
	jsr     pushax
	ldy     #$02
	jsr     _printf
	jsr     _GetCommand
	stx     tmp1
	ora     tmp1
	beq     L001D
	lda     #$00
	sta     _i
	sta     _i+1
L001C:	lda     _i
	ldx     _i+1
	jsr     pushax
	lda     _cant
	ldx     _cant+1
	jsr     decax1
	jsr     tosicmp
	beq     L0026
	bcs     L001D
L0026:	lda     #<(S0007)
	ldx     #>(S0007)
	jsr     pushax
	lda     _i
	ldx     _i+1
	jsr     aslax1
	clc
	adc     #<(_numPrim)
	tay
	txa
	adc     #>(_numPrim)
	tax
	tya
	jsr     pushw
	ldy     #$04
	jsr     _printf
	inc     _i
	bne     L001C
	inc     _i+1
	jmp     L001C
L001D:	lda     #<(S0008)
	ldx     #>(S0008)
	jsr     pushax
	ldy     #$02
	jsr     _printf
	jsr     _GetCommand
	stx     tmp1
	ora     tmp1
	jne     L0002
	tax
	rts

.endproc

