ca65 V2.19 - Git 4de40a20c
Main file   : sqrt.s
Current file: sqrt.s

000000r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000000r 1               ;Calculates 8-bit sqrt of 16-bit integer in num/num+1
000000r 1               ;result in root (0-255) and remainder in remain (0-511) in rem/rem+1
000000r 1               ;fastcall: LSB of passed num in A and MSB in X
000000r 1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
000000r 1               
000000r 1               ; only need popa or popax if other args
000000r 1               ; .import popa
000000r 1               ; .import popax
000000r 1               .export _sqrt
000000r 1               
000000r 1  xx xx        num:            .res 2
000002r 1  xx xx        rem:            .res 2
000004r 1  xx xx        temp:           .res 2
000006r 1  xx           root:           .res 1
000007r 1               
000007r 1               _sqrt:
000007r 1  8D rr rr     	sta num 		; store low byte param
00000Ar 1  8E rr rr     	stx num+1		; store high byte of param
00000Dr 1                 	; jsr popa 		; popa clobbers .Y but leaves .X alone
00000Dr 1               	; jsr popax		; pop A and X
00000Dr 1                 	; the stack has now been cleared of the passed-in parameters.
00000Dr 1               
00000Dr 1  A9 00        	lda	#0  		; clear A
00000Fr 1  8D rr rr     	sta	rem		    ; clear remainder low byte
000012r 1  8D rr rr     	sta	rem+1    	; clear remainder high byte
000015r 1  8D rr rr     	sta	root		; clear Root
000018r 1  A2 08        	ldx	#8  		; 8 pairs of bits to do
00001Ar 1               @loop:
00001Ar 1  0E rr rr     	asl	root		; root = root * 2
00001Dr 1               
00001Dr 1  0E rr rr     	asl	num		    ; shift highest bit of number ..
000020r 1  2E rr rr     	rol	num+1
000023r 1  2E rr rr     	rol	rem		    ; .. into remainder
000026r 1  2E rr rr     	rol	rem+1
000029r 1               
000029r 1  0E rr rr     	asl	num		    ; shift highest bit of number ..
00002Cr 1  2E rr rr     	rol	num+1
00002Fr 1  2E rr rr     	rol	rem		    ; .. into remainder
000032r 1  2E rr rr     	rol	rem+1
000035r 1               
000035r 1  AD rr rr     	lda	root		; copy root ..
000038r 1  8D rr rr     	sta	temp		; .. to temp
00003Br 1  A9 00        	lda	#0  		; clear byte
00003Dr 1  8D rr rr     	sta	temp+1		; clear temp high byte
000040r 1               
000040r 1  38           	sec				; +1
000041r 1  2E rr rr     	rol	temp		; temp = temp * 2 + 1
000044r 1  2E rr rr     	rol	temp+1
000047r 1               
000047r 1  AD rr rr     	lda	rem+1    	; get remainder high byte
00004Ar 1  CD rr rr     	cmp	temp+1		; compare with partial high byte
00004Dr 1  90 1F        	bcc	@next		; skip sub if remainder high byte smaller
00004Fr 1               
00004Fr 1  D0 08        	bne	@subtr		; do sub if <> (must be remainder>partial !)
000051r 1               
000051r 1  AD rr rr     	lda	rem	    	; get remainder low byte
000054r 1  CD rr rr     	cmp	temp		; comapre with partial low byte
000057r 1  90 15        	bcc	@next		; skip sub if remainder low byte smaller
000059r 1               
000059r 1                                   ; else remainder>=partial so subtract then
000059r 1               				    ; and add 1 to root. carry is always set here
000059r 1               @subtr:
000059r 1  AD rr rr     	lda	rem		    ; get remainder low byte
00005Cr 1  ED rr rr     	sbc	temp		; subtract partial low byte
00005Fr 1  8D rr rr     	sta	rem    	    ; save remainder low byte
000062r 1  AD rr rr     	lda	rem+1    	; get remainder high byte
000065r 1  ED rr rr     	sbc	temp+1		; subtract partial high byte
000068r 1  8D rr rr     	sta	rem+1    	; save remainder high byte
00006Br 1  EE rr rr     	inc	root		; increment Root
00006Er 1               
00006Er 1               @next:
00006Er 1  CA           	dex				; decrement bit pair count
00006Fr 1  D0 A9        	bne	@loop		; loop if not all done
000071r 1  A2 00        	ldx #0 			; clear the upper 8 bits of the return value, as we are returning A LSB and X MSB (and root is 1 byte)
000073r 1  AD rr rr     	lda root		; return root in A
000076r 1  60           	rts
000076r 1               
