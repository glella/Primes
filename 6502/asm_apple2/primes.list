ca65 V2.19 - Git 4de40a20c
Main file   : primes.s
Current file: primes.s

000000r 1               ; primes.s
000000r 1               ; compiles with: cl65 -t apple2enh -o prog.bin -C apple2bin.cfg -l primes.list primes.s
000000r 1               ; Automated build with build.sh
000000r 1               
000000r 1               .org $6000
006000  1               
006000  1  4C 72 60         jmp start
006003  1               
006003  1               ; Kernel
006003  1               CLRSCRN         = $FC58
006003  1               CHROUT          = $FDF0
006003  1               KEYBD           = $C000
006003  1               STROBE          = $C010
006003  1               NEWLINE         = $FC62
006003  1               
006003  1               ; character codes
006003  1               RETURN          = $8D
006003  1               CHAR_0          = $B0
006003  1               CHAR_9          = $B9
006003  1               SPACE           = $A0
006003  1               
006003  1               ; Zero Page "registers"
006003  1               ; Only 19 bytes available in Apple ][e:
006003  1               ; $06, $07, $08, $09
006003  1               ; $1E, $1F
006003  1               ; $CE, $CF
006003  1               ; $D7
006003  1               ; $EB, $EC, $ED, $EE, $EF
006003  1               ; $FA, $FB, $FC, $FD, $FE
006003  1               ;STR_PTR = $FC       ; address of string to be printed
006003  1               STR_PTR = $1E
006003  1               number  = $06       ; division variables
006003  1               divisor = $08
006003  1               remain  = $FC
006003  1               result  = $CE
006003  1               
006003  1               num     = $EB       ; root variables
006003  1               rem     = $ED
006003  1               temp    = $FA
006003  1               root    = $EF
006003  1               
006003  1               ; Macros 6502 & 65C02S
006003  1                   .macro PushAll
006003  1                       pha
006003  1                       phx
006003  1                       phy
006003  1                   .endmacro
006003  1               
006003  1                   .macro PullAll
006003  1                       ply
006003  1                       plx
006003  1                       pla
006003  1                   .endmacro
006003  1               
006003  1                   ; Loads a 16-bit Word (immediate) to A (lo-byte) and X (hi-byte)
006003  1                   .macro	LoadWordAX value
006003  1               	    lda #<value
006003  1               	    ldx #>value
006003  1                   .endmacro
006003  1               
006003  1                   ; Store the 16-bit Word in AX to address (lo,hi)
006003  1                   .macro	StoreAX address
006003  1               	    sta address
006003  1               	    stx address+1
006003  1                   .endmacro
006003  1               
006003  1                   ; Store a 16-bit Word (immediate) to address (lo,hi)
006003  1                   .macro	StoreImm value, address
006003  1               	    LoadWordAX value
006003  1               	    StoreAX address
006003  1                   .endmacro
006003  1               
006003  1                   ; Moves 1 byte from source to dest
006003  1                   .macro MoveB source, dest
006003  1               	    lda source
006003  1               	    sta dest
006003  1                   .endmacro
006003  1               
006003  1                   ; Moves the 16-bit Word from source (lo,hi) to dest (lo,hi)
006003  1                   .macro MoveW source, dest
006003  1               	    MoveB source+0, dest+0
006003  1               	    MoveB source+1, dest+1
006003  1                   .endmacro
006003  1               
006003  1                   .macro PRINT_STRING string
006003  1                       pha
006003  1                       lda #<string
006003  1                       sta STR_PTR
006003  1                       lda #>string
006003  1                       sta STR_PTR+1
006003  1                       jsr print_str
006003  1                       pla
006003  1                   .endmacro
006003  1               
006003  1               ; globals
006003  1  xx xx xx xx  input_string:   .res 8
006007  1  xx xx xx xx  
00600B  1  00 00        temp_word:      .word 0
00600D  1  00 00        input_binary:   .word 0
00600F  1  00 00        limit:          .word 0
006011  1  00 00        printnum:       .word 0
006013  1  00 00        scratch:        .word 0
006015  1  00 00        count:          .word 0
006017  1  00 00        ivar:           .word 0
006019  1               
006019  1               ; test with normal variables demonstrated that when zeroed out worked fine
006019  1               ; number:         .word 0
006019  1               ; divisor:        .word 0
006019  1               ; remain:         .word 0
006019  1               ; result:         .word 0
006019  1               ; num:            .word 0
006019  1               ; rem:            .word 0
006019  1               ; temp:           .word 0
006019  1               ; root:           .byte 0
006019  1               
006019  1               ; prompts
006019  1  2A 2A 2A 20  title:            .asciiz "*** Primes for Apple ][e ***"
00601D  1  50 72 69 6D  
006021  1  65 73 20 66  
006036  1  53 65 61 72  prompt:           .asciiz "Search primes limit: "
00603A  1  63 68 20 70  
00603E  1  72 69 6D 65  
00604C  1  4D 75 73 74  num_error_prompt: .asciiz "Must be a number: "
006050  1  20 62 65 20  
006054  1  61 20 6E 75  
00605F  1  4E 75 6D 62  count_of_primes:  .asciiz "Number of primes: "
006063  1  65 72 20 6F  
006067  1  66 20 70 72  
006072  1               
006072  1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
006072  1               ;Main
006072  1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
006072  1               start:
006072  1                   ; zero register variables if not gives wrong result
006072  1  64 06            stz number
006074  1  64 07            stz number+1
006076  1  64 08            stz divisor
006078  1  64 09            stz divisor+1
00607A  1  64 FC            stz remain
00607C  1  64 FD            stz remain+1
00607E  1  64 CE            stz result
006080  1  64 CF            stz result+1
006082  1  64 EB            stz num
006084  1  64 EC            stz num+1
006086  1  64 ED            stz rem
006088  1  64 EE            stz rem+1
00608A  1  64 FA            stz temp
00608C  1  64 FB            stz temp+1
00608E  1  64 EF            stz root
006090  1               
006090  1                   ; jsr CLRSCRN
006090  1  48 A9 19 85      PRINT_STRING title
006094  1  1E A9 60 85  
006098  1  1F 20 38 61  
00609D  1  20 62 FC         jsr NEWLINE
0060A0  1  48 A9 36 85      PRINT_STRING prompt
0060A4  1  1E A9 60 85  
0060A8  1  1F 20 38 61  
0060AD  1  20 CE 61         jsr get_number
0060B0  1  AD 0D 60 8D      MoveW input_binary, limit
0060B4  1  0F 60 AD 0E  
0060B8  1  60 8D 10 60  
0060BC  1  A9 01 A2 00      StoreImm 1, ivar        ; init outerloop variable
0060C0  1  8D 17 60 8E  
0060C4  1  18 60        
0060C6  1               
0060C6  1  A9 01 A2 00      StoreImm 1, count       ; 2 is a prime
0060CA  1  8D 15 60 8E  
0060CE  1  16 60        
0060D0  1                   ; StoreImm 2, printnum    ; print it
0060D0  1                   ; ldy #0                  ; Pad char '0' #48 or ' ' #32 or #0 for none
0060D0  1                   ; jsr PrDec16
0060D0  1                   ; lda #','
0060D0  1                   ; jsr print_char
0060D0  1                   ; lda #SPACE
0060D0  1                   ; jsr CHROUT
0060D0  1               
0060D0  1               outerloop:
0060D0  1  EE 17 60         inc ivar                ; increment ivar by 2
0060D3  1  D0 03            bne @cont1
0060D5  1  EE 18 60         inc ivar+1
0060D8  1               @cont1:
0060D8  1  EE 17 60         inc ivar
0060DB  1  D0 03            bne @cont2
0060DD  1  EE 18 60         inc ivar+1
0060E0  1               @cont2:
0060E0  1                   ; loop check
0060E0  1  AD 18 60         lda ivar+1              ; compare high byte
0060E3  1  CD 10 60         cmp limit+1
0060E6  1  90 0E            bcc continue
0060E8  1  D0 1E            bne outerloopdone
0060EA  1  AD 17 60         lda ivar                ; compare low byte
0060ED  1  CD 0F 60         cmp limit
0060F0  1  90 04            bcc continue            ; islower - ivar is lower than limit
0060F2  1  F0 02            beq continue            ; issame - ivar = limit
0060F4  1  D0 12            bne outerloopdone       ; ishigher - ivar is higher
0060F6  1               continue:
0060F6  1  20 69 62         jsr checkPrime          ; check if ivar is prime
0060F9  1  A5 FC            lda remain
0060FB  1  F0 D3            beq outerloop
0060FD  1               @processPrime:
0060FD  1  EE 15 60         inc count
006100  1  D0 03            bne @done_inc
006102  1  EE 16 60         inc count+1
006105  1               @done_inc:
006105  1                   ; jsr print_prime       ; don't print the number just count them
006105  1  4C D0 60         jmp outerloop
006108  1               outerloopdone:
006108  1  20 62 FC         jsr NEWLINE
00610B  1  AD 15 60 8D      MoveW count, printnum
00610F  1  11 60 AD 16  
006113  1  60 8D 12 60  
006117  1  48 A9 5F 85      PRINT_STRING count_of_primes
00611B  1  1E A9 60 85  
00611F  1  1F 20 38 61  
006124  1  A0 00            ldy #0                  ; no padding
006126  1  20 6F 61         jsr PrDec16
006129  1  20 62 FC         jsr NEWLINE
00612C  1  A9 00            lda #0                  ; return to basic
00612E  1  60               rts
00612F  1               
00612F  1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00612F  1               ;Adjust for ASCII to Apple character map
00612F  1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00612F  1               print_char:
00612F  1  48               pha
006130  1  18               clc
006131  1  69 80            adc #128                ; ASCII to apple character map
006133  1  20 F0 FD         jsr CHROUT
006136  1  68               pla
006137  1  60               rts
006138  1               
006138  1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
006138  1               ;Print string
006138  1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
006138  1               print_str:                  ; STR_PTR = address of null-terminated string
006138  1  5A               phy
006139  1  A0 00            ldy #0
00613B  1               @loop:
00613B  1  B1 1E            lda (STR_PTR),y
00613D  1  F0 06            beq @done
00613F  1  20 2F 61         jsr print_char
006142  1  C8               iny
006143  1  80 F6            bra @loop
006145  1               @done:
006145  1  7A               ply
006146  1  60               rts
006147  1               
006147  1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
006147  1               ;Get input from keyboard - custom routine for Apple ][e
006147  1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
006147  1               CHRIN:
006147  1  AD 00 C0         lda KEYBD
00614A  1  10 FB            BPL CHRIN               ; if no key pressed, loop back
00614C  1  8D 10 C0         sta STROBE              ; clear bit #7 of the keyboard
00614F  1  20 F0 FD         jsr CHROUT              ; print char pressed
006152  1  60               rts
006153  1               
006153  1               print_prime:
006153  1  AD 17 60 8D      MoveW ivar, printnum    ; copy ivar to printnum to convert and print
006157  1  11 60 AD 18  
00615B  1  60 8D 12 60  
00615F  1  A0 00            ldy #0                  ; Pad char '0' #48 or ' ' #32 or #0 for none
006161  1  20 6F 61         jsr PrDec16
006164  1  A9 2C            lda #','
006166  1  20 2F 61         jsr print_char
006169  1  A9 A0            lda #SPACE
00616B  1  20 F0 FD         jsr CHROUT
00616E  1  60               rts
00616F  1               
00616F  1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00616F  1               ;Print 16-bit decimal number
00616F  1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
00616F  1               ; INPUT:    printnum = value to print, copied to scratch
00616F  1               ;           .Y  = pad character
00616F  1               ;           (e.g. '0' #48 or ' ' #32 or #0 for none)
00616F  1               ;
00616F  1               ; INPUT:    at PrDec16Lp1
00616F  1               ;           Y=(number of digits)*2-2, e.g. 8 for 5 digits
00616F  1               ;
00616F  1               ; OUTPUT:   A,X,Y corrupted
00616F  1               PrDec16:
00616F  1  8C CD 61     	sty pad                 ; Save new padding character
006172  1  AD 11 60 8D  	MoveW printnum, scratch
006176  1  13 60 AD 12  
00617A  1  60 8D 14 60  
00617E  1  A0 08        	ldy #8                  ; Offset to powers of ten
006180  1               PrDec16Lp1:
006180  1  A2 FF        	ldx #$FF                ; Start with digit=-1
006182  1  38           	sec
006183  1               PrDec16Lp2:
006183  1  AD 13 60     	lda scratch             ; Subtract current tens
006186  1  F9 C3 61     	sbc PrDec16Tens+0,Y
006189  1  8D 13 60         sta scratch
00618C  1  AD 14 60         lda scratch+1
00618F  1  F9 C4 61         sbc PrDec16Tens+1,Y
006192  1  8D 14 60         sta scratch+1
006195  1  E8               inx                     ; Loop until <0
006196  1  B0 EB            bcs PrDec16Lp2
006198  1  AD 13 60         lda scratch             ; Add current tens back in
00619B  1  79 C3 61         adc PrDec16Tens+0,Y
00619E  1  8D 13 60         sta scratch
0061A1  1  AD 14 60         lda scratch+1
0061A4  1  79 C4 61         adc PrDec16Tens+1,Y
0061A7  1  8D 14 60         sta scratch+1
0061AA  1  8A               txa                     ; Not zero, print it
0061AB  1  D0 07            bne PrDec16Digit
0061AD  1  AD CD 61         lda pad                 ; pad<>0, use it
0061B0  1  D0 09            bne PrDec16Print
0061B2  1  F0 0A            beq PrDec16Next
0061B4  1               PrDec16Digit:
0061B4  1  A2 30            ldx #48                 ; ASC"0", No more zero padding
0061B6  1  8E CD 61         stx pad
0061B9  1  09 30            ora #48                 ; ASC"0", Print this digit
0061BB  1               PrDec16Print:
0061BB  1                   ;jsr CHROUT             ; need to adjust for Apple2 character map
0061BB  1  20 2F 61         jsr print_char
0061BE  1               PrDec16Next:
0061BE  1  88               dey                     ; Loop for next digit
0061BF  1  88               dey
0061C0  1  10 BE            bpl PrDec16Lp1
0061C2  1  60               rts
0061C3  1               PrDec16Tens:
0061C3  1  01 00            .word 1
0061C5  1  0A 00            .word 10
0061C7  1  64 00            .word 100
0061C9  1  E8 03            .word 1000
0061CB  1  10 27            .word 10000
0061CD  1  xx           pad:.res 1
0061CE  1               
0061CE  1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0061CE  1               ;Get number input from console
0061CE  1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0061CE  1               get_number:
0061CE  1  48               pha
0061CF  1  DA               phx
0061D0  1  5A               phy
0061D1  1  A2 00            ldx #0
0061D3  1               @input_loop:
0061D3  1  20 47 61         jsr CHRIN
0061D6  1  C9 8D            cmp #RETURN
0061D8  1  F0 08            beq @input_done
0061DA  1  9D 03 60         sta input_string,x
0061DD  1  E8               inx
0061DE  1  E0 08            cpx #8
0061E0  1  D0 F1            bne @input_loop
0061E2  1                   ;jsr flush_chrin            ; no need to flush as STROBE does that
0061E2  1               @input_done: ; A = RETURN
0061E2  1  20 F0 FD         jsr CHROUT
0061E5  1  9E 03 60         stz input_string,x ; null termination
0061E8  1                   ; check for number
0061E8  1  A2 00            ldx #0
0061EA  1               @check_loop:
0061EA  1  BD 03 60         lda input_string,x
0061ED  1  C9 00            cmp #0
0061EF  1  F0 0B            beq @check_empty
0061F1  1  C9 B0            cmp #CHAR_0
0061F3  1  30 0B            bmi @error
0061F5  1  C9 BA            cmp #(CHAR_9 + 1)
0061F7  1  10 07            bpl @error
0061F9  1  E8               inx
0061FA  1  80 EE            bra @check_loop
0061FC  1               @check_empty:
0061FC  1  E0 00            cpx #0
0061FE  1  D0 10            bne @convert
006200  1               @error:
006200  1  48 A9 4C 85      PRINT_STRING num_error_prompt
006204  1  1E A9 60 85  
006208  1  1F 20 38 61  
00620D  1  4C D3 61         jmp @input_loop
006210  1               @convert:
006210  1  A2 00            ldx #0
006212  1  9C 0D 60         stz input_binary
006215  1  9C 0E 60         stz input_binary+1
006218  1               @conv_loop:
006218  1  BD 03 60         lda input_string,x
00621B  1  F0 48            beq @done
00621D  1                   ; new digit, multiply input_binary by 10
00621D  1  0E 0D 60         asl input_binary
006220  1  2E 0E 60         rol input_binary+1
006223  1  AD 0D 60         lda input_binary
006226  1                   ; multiplied by 2 - save value in temp variable
006226  1  8D 0B 60         sta temp_word
006229  1  AD 0E 60         lda input_binary+1
00622C  1  8D 0C 60         sta temp_word+1
00622F  1                   ; continue shifting two more bits to multiply by 8
00622F  1  0E 0D 60         asl input_binary
006232  1  2E 0E 60         rol input_binary+1
006235  1  0E 0D 60         asl input_binary
006238  1  2E 0E 60         rol input_binary+1
00623B  1                   ; now add x2 value to x8 value to get x10 value
00623B  1  AD 0D 60         lda input_binary
00623E  1  18               clc
00623F  1  6D 0B 60         adc temp_word
006242  1  8D 0D 60         sta input_binary
006245  1  AD 0E 60         lda input_binary+1
006248  1  6D 0C 60         adc temp_word+1
00624B  1  8D 0E 60         sta input_binary+1
00624E  1                   ; now add digit from string
00624E  1  BD 03 60         lda input_string,x
006251  1  29 0F            and #$0F ; zero out upper nybble to get digit numerical value
006253  1  18               clc
006254  1  6D 0D 60         adc input_binary
006257  1  8D 0D 60         sta input_binary
00625A  1  AD 0E 60         lda input_binary+1
00625D  1  69 00            adc #0 ; let carry happen, if necessary
00625F  1  8D 0E 60         sta input_binary+1
006262  1  E8               inx
006263  1  80 B3            bra @conv_loop
006265  1               @done:
006265  1  7A               ply
006266  1  FA               plx
006267  1  68               pla
006268  1  60               rts
006269  1               
006269  1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
006269  1               ;Check is a given number is prime
006269  1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
006269  1               ; trial division
006269  1               checkPrime:
006269  1  A9 01        	lda #1                  ; set divisor to 1
00626B  1  85 08        	sta divisor
00626D  1  AD 17 60 85      MoveW ivar, num         ; load num (root) with ivar
006271  1  EB AD 18 60  
006275  1  85 EC        
006277  1  20 DD 62         jsr sqroot              ; calc sqroot of num
00627A  1  E6 EF            inc root                ; add 1 to root for loop limit = int(sqrt(i))+1
00627C  1               @loopcheck:
00627C  1  E6 08        	inc divisor
00627E  1  AD 17 60 85      MoveW ivar, number      ; reset number to be divided
006282  1  06 AD 18 60  
006286  1  85 07        
006288  1                   ;jsr divide              ; trial division
006288  1  20 C2 62         jsr divideby8bit        ; divide by 8bit - much faster
00628B  1  A5 FC        	lda remain              ; if remainder is zero it is not a prime
00628D  1  F0 06        	beq @exit	            ; branch if equal to 0
00628F  1               
00628F  1  A6 08            ldx divisor             ; are we done yet?
006291  1  E4 EF            cpx root
006293  1  D0 E7            bne @loopcheck
006295  1               @exit:
006295  1  60           	rts
006296  1               
006296  1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
006296  1               ;16-Bit Binary Division
006296  1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
006296  1               divide:
006296  1  48 DA 5A         PushAll
006299  1  A9 00        	lda #0	        ; preset remainder to 0
00629B  1  85 FC        	sta remain
00629D  1  85 FD        	sta remain+1
00629F  1  A2 10        	ldx #16	       	; repeat for each bit - 16 times
0062A1  1               @divloop:
0062A1  1  06 06        	asl number		; dividend lb & hb*2, msb -> Carry
0062A3  1  26 07        	rol number+1
0062A5  1  26 FC        	rol remain		; remainder lb & hb * 2 + msb from carry
0062A7  1  26 FD        	rol remain+1
0062A9  1  A5 FC        	lda remain
0062AB  1  38           	sec
0062AC  1  E5 08        	sbc divisor		; substract divisor to see if it fits in
0062AE  1  A8           	tay	        	; lb result -> Y, for we may need it later
0062AF  1  A5 FD        	lda remain+1
0062B1  1  E5 09        	sbc divisor+1
0062B3  1  90 06        	bcc @skip		; if carry=0 then divisor didn't fit in yet
0062B5  1  85 FD        	sta remain+1	; else save substraction result as new remainder
0062B7  1  84 FC        	sty remain
0062B9  1  E6 CE        	inc result		; and increment result cause divisor fit in 1 times
0062BB  1               @skip:
0062BB  1  CA           	dex
0062BC  1  D0 E3        	bne @divloop
0062BE  1  7A FA 68         PullAll
0062C1  1  60           	rts
0062C2  1               
0062C2  1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062C2  1               ;16-Bit by 8-Bit Binary Division
0062C2  1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062C2  1               divideby8bit:
0062C2  1  A9 00            lda #0
0062C4  1  85 FD            sta remain+1
0062C6  1  A0 10            ldy #16
0062C8  1               @L0:
0062C8  1  06 06            asl number
0062CA  1  26 07            rol number+1
0062CC  1  2A               rol a
0062CD  1  B0 04            bcs @L1
0062CF  1  C5 08            cmp divisor
0062D1  1  90 04            bcc @L2
0062D3  1               @L1:
0062D3  1  E5 08            sbc divisor
0062D5  1  E6 06            inc number
0062D7  1               @L2:
0062D7  1  88               dey
0062D8  1  D0 EE            bne @L0
0062DA  1  85 FC            sta remain
0062DC  1  60               rts
0062DD  1               
0062DD  1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062DD  1               ;Calculates 8-bit sqrt of 16-bit integer in num/num+1
0062DD  1               ;result in root (0-255) and remainder in remain (0-511) in rem/rem+1
0062DD  1               ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0062DD  1               sqroot:
0062DD  1  48 DA 5A     	PushAll
0062E0  1  A9 00        	lda	#0  		; clear A
0062E2  1  85 ED        	sta	rem		    ; clear remainder low byte
0062E4  1  85 EE        	sta	rem+1    	; clear remainder high byte
0062E6  1  85 EF        	sta	root		; clear Root
0062E8  1  A2 08        	ldx	#8  		; 8 pairs of bits to do
0062EA  1               @loop:
0062EA  1  06 EF        	asl	root		; root = root * 2
0062EC  1               
0062EC  1  06 EB        	asl	num		    ; shift highest bit of number ..
0062EE  1  26 EC        	rol	num+1
0062F0  1  26 ED        	rol	rem		    ; .. into remainder
0062F2  1  26 EE        	rol	rem+1
0062F4  1               
0062F4  1  06 EB        	asl	num		    ; shift highest bit of number ..
0062F6  1  26 EC        	rol	num+1
0062F8  1  26 ED        	rol	rem		    ; .. into remainder
0062FA  1  26 EE        	rol	rem+1
0062FC  1               
0062FC  1  A5 EF        	lda	root		; copy root ..
0062FE  1  85 FA        	sta	temp		; .. to temp
006300  1  A9 00        	lda	#0  		; clear byte
006302  1  85 FB        	sta	temp+1		; clear temp high byte
006304  1               
006304  1  38           	sec				; +1
006305  1  26 FA        	rol	temp		; temp = temp * 2 + 1
006307  1  26 FB        	rol	temp+1
006309  1               
006309  1  A5 EE        	lda	rem+1    	; get remainder high byte
00630B  1  C5 FB        	cmp	temp+1		; compare with partial high byte
00630D  1  90 16        	bcc	@next		; skip sub if remainder high byte smaller
00630F  1               
00630F  1  D0 06        	bne	@subtr		; do sub if <> (must be remainder>partial !)
006311  1               
006311  1  A5 ED        	lda	rem	    	; get remainder low byte
006313  1  C5 FA        	cmp	temp		; comapre with partial low byte
006315  1  90 0E        	bcc	@next		; skip sub if remainder low byte smaller
006317  1               
006317  1                                   ; else remainder>=partial so subtract then
006317  1               				    ; and add 1 to root. carry is always set here
006317  1               @subtr:
006317  1  A5 ED        	lda	rem		    ; get remainder low byte
006319  1  E5 FA        	sbc	temp		; subtract partial low byte
00631B  1  85 ED        	sta	rem    	    ; save remainder low byte
00631D  1  A5 EE        	lda	rem+1    	; get remainder high byte
00631F  1  E5 FB        	sbc	temp+1		; subtract partial high byte
006321  1  85 EE        	sta	rem+1    	; save remainder high byte
006323  1  E6 EF        	inc	root		; increment Root
006325  1               
006325  1               @next:
006325  1  CA           	dex				; decrement bit pair count
006326  1  D0 C2        	bne	@loop		; loop if not all done
006328  1  7A FA 68     	PullAll
00632B  1  60           	rts
00632B  1               
