#!/usr/bin/env python# Filename: primesweave.py# Test inlining C code - As fast as C obviously import timefrom scipy import weavefrom scipy.weave import convertersTrue = 1False = 0def getPrimeList(n):        code = """                #include <math.h>                int         isPrime;                int         i,n, cant;                     float       sq;                py::list numPrim(200)                        for(i = 3; i <= num; i=i+2) {            isPrime = 1;            sq = pow(i,0.5);                        for(n = 3; (n <= (int)sq) && isPrime; n=n+2)                if (i % n == 0)                    isPrime = 0;                        if (isPrime)                return_val = 1;            else                return_val = 0;        } // end for (main loop)                """        	""" Returns a list of prime numbers from 1 to < n using trial division algorithm"""	resList = [2]	if n <= 1: return []	if n == 2: return resList        primo = True        err = weave.inline(code,                           ['n', 'primo'],                           type_converters = converters.blitz,                           compiler = 'gcc')        if primo:                resList.append(i)	return resListif __name__ == "__main__":	print "\nLooks for prime numbers from 1 to your input"	cont = True		while cont:		n = int(raw_input('Seek until what integer number ? '))				t1 = time.time()		primeList = getPrimeList(n)		t2 = time.time()				print 'Found %i prime numbers. Took %0.3fsec.' % (len(primeList),t2-t1)		if ((raw_input('Print prime numbers ? (y/n) ')) == ('y' or 'Y')):			print primeList					if ((raw_input('Another run ? (y/n) ')) != ('y' or 'Y')):			cont = False		print				#time.sleep(5)